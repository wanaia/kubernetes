---
description:
globs:
alwaysApply: true
---
# Git 在 Kubernetes 开发中的最佳实践

## Git 基础知识

### 核心概念
- 仓库（Repository）：代码存储库
- 提交（Commit）：代码更改的保存点
- 分支（Branch）：代码的独立开发线
- 远程（Remote）：远程仓库引用
- 标签（Tag）：特定提交的命名引用

### 基本操作
- `git clone`: 克隆仓库
- `git add`: 添加文件到暂存区
- `git commit`: 提交更改
- `git push`: 推送更改到远程
- `git pull`: 拉取并合并远程更改
- `git fetch`: 获取远程更改但不合并
- `git merge`: 合并分支
- `git rebase`: 变基操作
- `git cherry-pick`: 选择性应用提交

## Kubernetes 代码库特点

### 仓库规模
- 超大型代码库（数百万行代码）
- 多组件、多模块设计
- staging 目录和 vendor 管理
- 高频率的提交和更改

### 分支策略
- 主分支 `master`
- 发布分支 `release-X.Y`
- 功能分支（临时）
- Kubernetes 版本发布周期

### 贡献流程
- Fork-and-Pull 模型
- Pull Request 流程
- SIG（特别兴趣小组）审查
- OWNERS 文件和审批机制
- 多阶段代码审查

## Git 工作流

### Fork 工作流
1. Fork Kubernetes 仓库到个人账号
2. 克隆个人 Fork 到本地
3. 添加上游仓库作为远程源
4. 基于上游创建功能分支
5. 提交代码并推送到个人 Fork
6. 创建 Pull Request 到上游

### 保持 Fork 同步
- 定期从上游获取更新
- 在创建新分支前同步主分支
- 处理合并冲突的技巧
- 使用 rebase 而非 merge 保持提交历史整洁

### 创建好的提交
- 原子性提交（每个提交做一件事）
- 清晰的提交信息
- 遵循 Kubernetes 提交消息规范
- 关联 Issue 编号
- 签署 DCO（Developer Certificate of Origin）

## 高级 Git 技巧

### 分支管理
- 创建和切换分支
- 合并和变基分支
- 删除本地和远程分支
- 跟踪上游分支

### 提交操作
- 修改最近的提交（amend）
- 压缩提交（squash）
- 重写提交历史（interactive rebase）
- 查找引入特定代码的提交（blame/bisect）

### 解决冲突
- 理解冲突标记
- 使用合并工具
- 解决复杂合并冲突的策略
- 中止合并或变基操作

### 恢复和重置
- 丢弃工作区更改
- 重置暂存区
- 回退到特定提交
- 恢复已删除的提交
- 使用 reflog 找回操作

## Kubernetes 特定的 Git 实践

### 提交信息格式
```
组件: 简短描述不超过50个字符

更详细的说明，解释这个改动做了什么以及为什么需要这个改动。
可以分成多行，每行不超过72个字符。

如果适用，提交消息应以一个空行结尾，后跟一个或多个
引用外部资源的行，例如问题跟踪器的问题或PR。

Fixes #12345
```

### 常见组件前缀
- `api`
- `apiserver`
- `kubectl`
- `kubelet`
- `proxy`
- `scheduler`
- `controller`
- `test`
- `docs`

### PR 流程与标签
- PR 标题格式
- 必需的标签（如 `kind/bug`, `sig/node`）
- PR 描述模板
- 测试要求和验证步骤

### 代码审查工作流
- 审阅者和批准者角色
- `/lgtm` 和 `/approve` 命令
- 处理审查意见
- Prow 机器人命令

## Git 工具与集成

### 推荐的 Git 工具
- Git 命令行接口
- IDE 集成（VS Code, GoLand）
- 图形化客户端（GitKraken, Sourcetree）
- Diff 和合并工具

### GitHub 特性
- GitHub CLI
- GitHub Actions
- Pull Request 模板
- 议题模板
- 高级 PR 功能（Draft PR, 里程碑）

### 持续集成
- Prow 测试基础设施
- 测试结果和覆盖率
- 测试通过与合并要求
- CI 失败排查

## 常见问题与解决方案

### 分支管理问题
- 解决陈旧分支问题
- 处理多个活跃分支
- 跟踪上游变更
- 删除多余分支

### 提交和推送问题
- 撤销错误提交
- 修复提交消息
- 处理拒绝的推送
- 解决 DCO 签名问题

### 合并和变基问题
- 解决复杂合并冲突
- 中止变基操作
- 完成中断的变基
- 修复错误的合并

### 大型仓库问题
- 提高 Git 性能
- 部分克隆和浅克隆
- 处理大文件
- 管理工作区大小

## Git 最佳实践

### 日常工作流
- 每日更新主分支
- 创建功能分支
- 定期小批量提交
- 提交前检查代码
- 提交前测试

### 代码质量维护
- 使用 pre-commit 钩子
- 在提交前运行测试
- 执行代码风格检查
- 验证提交消息格式
- 遵循 Kubernetes 贡献指南

### 协作技巧
- 与上游保持同步
- 提前解决冲突
- 请求早期反馈
- 提供有用的 PR 描述
- 及时响应审查意见

### 故障排除
- 使用 git bisect 查找问题
- 检查日志和历史记录
- 理解错误消息
- 知道何时寻求帮助

## Kubernetes 贡献工作流程

### 首次贡献
1. 签署 CLA（贡献者许可协议）
2. Fork 仓库
3. 配置开发环境
4. 找寻合适的初学者任务
5. 提交第一个 PR

### 日常贡献
1. 与上游保持同步
2. 创建功能分支
3. 实现更改并添加测试
4. 推送到 Fork
5. 创建 PR
6. 响应代码审查
7. 更新 PR 直到合并

### 处理复杂功能
1. 先讨论设计
2. 创建 KEP（Kubernetes Enhancement Proposal）
3. 分阶段实现功能
4. 协调跨 SIG 工作
5. 管理功能门控标志

### 发布流程参与
1. 理解发布周期
2. 参与发布团队
3. 帮助测试 Alpha/Beta 特性
4. 修复发布阻塞问题
5. 参与发布文档编写
